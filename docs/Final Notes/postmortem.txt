Design Patterns Used:
I wanted to work with the factory pattern for collection of the inventory system because not only will it lead to me having something close to it thanks to the scriptable objects items can be implemented with ease so long as they are put into the database scriptable object so that the inventory calls can be made without completely losing the data of that particular object such as when I have decided to move objects around the inventory slots or to equip them intend to enhance the player's stats. By having a simple array of the items in ease of access I can also be able to implement it in a 3D game since the concept of item can be applied for anything that involves picking up items and using them later in whether that would be in combat or progression.

Challenges with components:
I have and still struggled everything involves the interaction with the weapon and general user experience with the game which is kind of irritating considering it similar to the previous final in the fall that was the similar game being top down but now involving the child objects and not the parent. I wanted to work with some simple animations that were changing the rotation of the melee weapon but I didn't have a clue where to look for stuff like that and I found animation is a long process for little return given my desire to be a programmer rather than animations. 

How reusable is the code?

Non reuseable 20%
The main thing that isnt reusable is the player class and all the other classes that interact with it albeit some of it is smaller interactability than others. This percentage is also including scripts that use outside packages like tmp and new input system (I did use cinemachine stuff but I didn't make any code involving their namespaces associated with the package)

Non-Unity 10% overall
This is only the Enemy class and the simplest part of a game item that isn't using the monobehaviour and was mainly used to help me think about using this in unity as a starting point

Unity Related 70%
This is the complete inventory system as the sprites are most intended for ui object identification and the item related can be worked into other types of rpgs granted it has to be unity related

How maintainable is the code made
I think the inventory system is the easist to maintain and this could be where someone who isn't good with programming can just work with the unity editor right click and look for the createassetmenu related to what they are looking more whether that is a new enemy to put in or items. Enemy interactions(i.e. [enemytype]mono classes) the methods and enums that the scripts call for that will set enemy actions in the scenes.

Technical debt in the game
There is a lot of technical debt where it involves the player and how the main inventory system requires a lot of work and restructure given that this is only for unity but this serves as a good basis for thinking what would the work entail if it would done in another engine like Unreal or monogame.

Did I finish the game? 
NO absolutely didn't the game in my mind. I hated myself for struggling on so many aspects of the game this time around whether that was thinking of game ideas, implementing systems new to me was very satisifying to achieve even to a decent quality given this was my first go around.